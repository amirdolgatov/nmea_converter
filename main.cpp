#include <iostream>
#include <string.h>
#include "ubx.h"
#include <bbb_uart.h>

uint8_t nav_pvt_msg[] = {
        0xB5, 0x62, // header
        0x01, 0x07, // class
        0x5C, 0x00, // length
        0x70, 0x2D, 0xB4, 0x12, 0xE8, 0x07, 0x0A, 0x10, 0x0F, 0x09,
        0x28, 0x37, 0x83, 0x00, 0x00, 0x00, 0x5E, 0xCB, 0xFB, 0xFF, 0x03, 0x03, 0xEA, 0x06, 0x05, 0xCB,
        0xA4, 0x16, 0x57, 0xBC, 0x1D, 0x21, 0x6B, 0x68, 0x02, 0x00, 0xB0, 0x35, 0x02, 0x00, 0x65, 0x4A,
        0x00, 0x00, 0x99, 0x55, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xC9, 0xFF, 0xFF, 0xFF, 0x84, 0x00,
        0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x80, 0x6A, 0xF0, 0x01, 0x23, 0x02, 0x00, 0x00, 0x80, 0xA8,
        0x12, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x80, 0x6C, 0x4A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
        0xD7, 0xD9
};

uint8_t msg1[] = {
        0xB5, 0x62, // header
        0x01, 0x07, // class
        0x5C, 0x00, // length
        0x28, 0x39, 0xB4, 0x12, 0xE8, 0x07, 0x0A, 0x10, 0x0F, 0x09,
        0x2B, 0x37, 0x83, 0x00, 0x00, 0x00, 0x6C, 0xCC, 0xFB, 0xFF, 0x03, 0x03, 0xEA, 0x06, 0xFC, 0xCA,
        0xA4, 0x16, 0x56, 0xBC, 0x1D, 0x21, 0xAA, 0x68, 0x02, 0x00, 0xEF, 0x35, 0x02, 0x00, 0x8D, 0x4A,
        0x00, 0x00, 0xC6, 0x55, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xD0, 0xFF, 0xFF, 0xFF, 0x84, 0x00,
        0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x80, 0x6A, 0xF0, 0x01, 0x25, 0x02, 0x00, 0x00, 0x80, 0xA8,
        0x12, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x80, 0x6C, 0x4A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
        0x83, 0xF3
};

uint8_t msg2[] = {
        0xB5, 0x62, // header
        0x01, 0x07, // class
        0x5C, 0x00, // length
        0x58, 0x31, 0xB4, 0x12, 0xE8, 0x07, 0x0A, 0x10, 0x0F, 0x09,
        0x29, 0x37, 0x83, 0x00, 0x00, 0x00, 0xB8, 0xCB, 0xFB, 0xFF, 0x03, 0x03, 0xEA, 0x06, 0x03, 0xCB,
        0xA4, 0x16, 0x57, 0xBC, 0x1D, 0x21, 0x8A, 0x68, 0x02, 0x00, 0xD0, 0x35, 0x02, 0x00, 0x71, 0x4A,
        0x00, 0x00, 0xA6, 0x55, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0xDC, 0xFF, 0xFF, 0xFF, 0x7F, 0x00,
        0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x80, 0x6A, 0xF0, 0x01, 0x26, 0x02, 0x00, 0x00, 0x80, 0xA8,
        0x12, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x80, 0x6C, 0x4A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
        0x64, 0x1B
};


uint8_t fake_msg_1[] = {
        0xB5, 0x62, // header
        0x01, 0x07, // class
        0x50, 0x00, // length
        0x70, 0x2D, 0xB4, 0x12, 0xE8, 0x07, 0x0A, 0x10, 0x0F, 0x09,
        0x28, 0x37, 0x83, 0x00, 0x00, 0x00, 0x5E, 0xCB, 0xFB, 0xFF, 0x03, 0x03, 0xEA, 0x06, 0x05, 0xCB,
        0xA4, 0x16, 0x57, 0xBC, 0x1D, 0x21, 0x6B, 0x68, 0x02, 0x00, 0xB0, 0x35, 0x02, 0x00, 0x65, 0x4A,
        0x00, 0x00, 0x99, 0x55, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xC9, 0xFF, 0xFF, 0xFF, 0x84, 0x00,
        0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x80, 0x6A, 0xF0, 0x01, 0x23, 0x02, 0x00, 0x00, 0x80, 0xA8,
        0x12, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x80, 0x6C, 0x4A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
        0xD7, 0xD9
};

uint8_t fake_msg_2[] = {
        0xB5, 0x60, // header
        0x01, 0x07, // class
        0x5C, 0x00, // length
        0x70, 0x2D, 0xB4, 0x12, 0xE8, 0x07, 0x0A, 0x10, 0x0F, 0x09,
        0x28, 0x37, 0x83, 0x00, 0x00, 0x00, 0x5E, 0xCB, 0xFB, 0xFF, 0x03, 0x03, 0xEA, 0x06, 0x05, 0xCB,
        0xA4, 0x16, 0x57, 0xBC, 0x1D, 0x21, 0x6B, 0x68, 0x02, 0x00, 0xB0, 0x35, 0x02, 0x00, 0x65, 0x4A,
        0x00, 0x00, 0x99, 0x55, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xC9, 0xFF, 0xFF, 0xFF, 0x84, 0x00,
        0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x80, 0x6A, 0xF0, 0x01, 0x23, 0x02, 0x00, 0x00, 0x80, 0xA8,
        0x12, 0x01, 0xE7, 0x00, 0x00, 0x00, 0x80, 0x6C, 0x4A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
        0xD7, 0xD9
};

int main() {

    received_data receivedData;


    message msg_1{.size = sizeof(nav_pvt_msg)};
    message msg_2{.size = sizeof(msg1)};
    message msg_3{.size = sizeof(msg2)};


    memcpy((void *)msg_1.data, (void *)nav_pvt_msg, sizeof(nav_pvt_msg));
    memcpy((void *)msg_1.data, (void *)msg1, sizeof(msg1));
    memcpy((void *)msg_1.data, (void *)msg2, sizeof(msg2));


    parse_ubx(msg_1, receivedData);

    if(receivedData.nav_pvt && !receivedData.nav_sig)
        std::cout << "OK" << std::endl;

    return 0;
}
